#!/usr/bin/bash

function createTable() {
    read -p "Please Enter Table name: " Dname
    if [[ -f $Dname ]]; then
        echo "Table already exists."
        return
    elif [[ ! "$Dname" =~ ^[a-zA-Z0-9_[:space:]]+$ ]]; then
        echo "Error: Table name must only contain letters, numbers, and underscores."
        return
    else 

        touch $Dname
        read -p "Please Enter number of columns: " colNum
        declare -a colNames
        declare -a colTypes
        for ((i=1; i<=colNum; i++)); do   
            read -p "Please Enter column ${i} name: " colName
            colNames[$i]=$colName 
            select choice in "String" "Number"; do
                case $choice in
                    "String")
                        colTypes[$i]="String"
                        break
                        ;;
                    "Number")
                        colTypes[$i]="Number"
                        break
                        ;;
                    *)
                        echo "Invalid option, please try again."
                        ;;
                esac
            done
            read -p "Do you want to set this column as BK? (y/n): " bkResponse
            if [[ $bkResponse == "y" ]]; then
                colBK="yes"
            elif [[ $bkResponse == "n" ]]; then
                colBK="no"
            else
                echo "Invalid response for BK setting."
            fi
          if [[ $colBK == "yes" ]]
          then
          echo  "${colNames[$i]}:${colTypes[$i]}:PK" >> "$Dname"-MetaData  
          else
          echo  "${colNames[$i]}:${colTypes[$i]}" >> "$Dname"-MetaData  
          fi
          echo -n "${colNames[$i]}:" >> "$Dname"
          # -n to skip new line
        done

        echo "Table '$Dname' is created "
    fi
    TableMenu
}


function listTables(){
ls $pwd
TableMenu
}

function dropTables(){
ls $pwd
        read -p "Please Enter Table Name : " tableName
        if [[ -f $tableName ]]
        then 
        rm $tableName
        rm $tableName-MetaData
        echo " $tableName Table has been deleted."
        else
        echo "The Table Dose't Exists"
        fi
        TableMenu
}

 function updateTable() {
   ls $pwd
    read -p "Please Enter Table name: " Tname
    if [[ ! -f $Tname ]]; then
        echo "Table doesn't exist."
        return
    fi
awk '{ print $0 }' $Tname
read -p "Please Enter id: " rowNum
while [[ -z "$rowNum" ]]; do
echo "Error: ID cannot be empty. Please Enter a valid ID."
read -p "Please Enter id: " rowNum
done

idExists=$(checkId)
while [[ -z "$idExists" ]]; do
echo "Error: ID '$rowNum' does not exist in the table."
read -p "Please Enter id: " rowNum
idExists=$(checkId)
 done
#======================================== done

read -p "Please Enter column Name: " colName
colNum=$(checkColName)
while [[ -z "$colNum" ]]; do
    echo "Error: Column '$colName' does not exist in the table."
    read -p "Please Enter column Name: " colName  
colNum=$(checkColName)
done

#============================================================= done
read -p "Please insert new data: " newData
newData=$(echo "$newData" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
isPK=$(awk -v col_name="$colName" -F":" '
    {   
        gsub(/^ *| *$/, "", $1)
        gsub(/^ *| *$/, "", $3)
        if ($1 == col_name && $3=="PK") {
            print "PK"
        }
    }' $Tname-MetaData)

if [[ ! -z "$isPK" ]]; then
    valueExists=$(checkUniqe)
  
    while [[ ! -z "$valueExists" ]]; do
        echo "Error: The value '$newData' already exists in the '$colNum' column (which is a unique key)."
        read -p "Please insert new data: " newData
       valueExists=$(checkUniqe)
    done
fi
#========================================================== doneeeeeeeeeeeeeeeeee

colType=$(awk -v colName="$colName" -F":" '

    $1 == colName {
        gsub(/^ *| *$/, "", $2);  
        print $2; 
        exit
    }
'  $Tname-MetaData)

colType=$(echo "$colType" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
case "$colType" in
    "Number")
        newData=$(echo "$newData" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        while [[ ! "$newData" =~ ^[0-9]+$ ]]; do
            echo "Error: The value must be a number for column '$colName'."
            read -p "Please insert new data: " newData
            newData=$(echo "$newData" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        done
        ;;
    "String")
        newData=$(echo "$newData" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        while [[ ! "$newData" =~ ^[a-zA-Z_[:space:]]+$ ]]; do
            echo "Error: The value must only contain letters, numbers, underscores, and spaces for column '$colName'."
            read -p "Please insert new data: " newData
            newData=$(echo "$newData" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        done
        ;;
    *)
        echo "Error: Unsupported colType '$colType'."
        ;;
esac

awk -v search_id="$rowNum" -v col_num="$colNum" -v new_data="$newData" -F ":" ' 
BEGIN { OFS=":" }  
{
    gsub(/^ *| *$/, "", $1);  
    if ($1 == search_id) {
        $col_num = new_data;  
    }
    print $0;
}' "$Tname" > temp_file && mv temp_file "$Tname"

echo "Data updated successfully."
    awk '{ print $0 }' $Tname

TableMenu
}
function InsertIntoTable() {

    read -p "Enter table name: " tableName
   # database="db2"
   # fullPath="$parentDir/$database"

   # cd "$fullPath" || { echo "Error: Database directory not found!"; exit 1; }

    while [[ ! -f "$tableName" ]]; do
        echo -e "${RED}❌ Error: Table does not exist!${RESET}"
        read -p "Enter table name: " tableName
    done

    columnNames=()
    dataTypes=()
    primaryKeys=()
    
    while IFS=":" read -r colName dataType pk; do
        columnNames+=("$colName")
        dataTypes+=("$dataType")
        if [[ "$pk" =~ PK ]]; then
            primaryKeys+=("$colName")
        fi
    done < "${tableName}-MetaData"
    
    echo "Primary Key(s): ${primaryKeys[*]}"

    validate_input() {
        local value="$1"
        local type="$2"
        value=$(echo "$value" | xargs)
        type=$(echo "$type" | xargs)
        echo "$type"
        if [ "$type" = "string" ]; then
            if [[ ! "$value" =~ ^[a-zA-Z]+$ ]]; then
                echo "Invalid Input"
                return 1 
            fi
        elif [ "$type" = "number" ]; then
            if [[ ! "$value" =~ ^[0-9]+$ ]]; then
                echo "Invalid Input"
                return 1 
            fi
        fi
        echo "Valid input"
        return 0  
    }

    while true; do
        read -p "$(echo -e "${CYAN}Insert the data colon-separated in this order: ${columnNames[*]} ==> ${RESET}")" insertedRecord
        IFS=':' read -r -a insertedValues <<< "$insertedRecord"

        if [ "${#insertedValues[@]}" -ne "${#columnNames[@]}" ]; then
            echo -e "${RED}❌ Error: You entered ${#insertedValues[@]} values, but ${#columnNames[@]} are expected.${RESET}"
            continue
        fi

        valid=1 
        for i in "${!columnNames[@]}"; do
            if ! validate_input "${insertedValues[i]}" "${dataTypes[i]}"; then
                echo -e "${RED}❌ Invalid input for field $((i+1)) ==> It should be a ${dataTypes[i]}${RESET}"
                valid=0
                break  
            fi
        done

        if [ "$valid" -eq 1 ]; then
            echo "$insertedRecord" >> "$tableName"
            echo -e "${GREEN}✅ Record added successfully!${RESET}\n"
            break
        fi
    done
    TableMenu
}
function checkId(){
idExists=$(awk -F: -v search_id="$rowNum" 'NR >= 2{
	 if ($1 == search_id) {
	print NR; 
	exit  
	   }
}' "$Tname")
	 echo "$idExists"
}
	    
function checkColName(){
colNum=$(awk -v colName="$colName" -F":" 'NR == 1 {
    gsub(/^ *| *$/, "", colName)
    for (i = 1; i <= NF; i++) {
        if ($i == colName) {
            print i
            exit
        }
    }
}' "$Tname")

	 echo "$colNum"
  }
	    
function checkUniqe(){
 valueExists=$(awk -v colNum="$colNum" -v newData="$newData" -F":" '
        NR > 1 {   
            gsub(/^ *| *$/, "", $colNum)  
            gsub(/^ *| *$/, "", newData)  
            if ($colNum == newData) {
                print "value_exists"
                exit
            }
        }' $Tname)
	 echo "$valueExists"
}

function TableMenu () {
echo "Select an option:"
select choice in "Create Table" "List Tables" "Drop Table" "Insert into Table" "Select From Table" "Delete From Table" "Update Table" "Back to main menu"; 
do
    case $choice in
        "Create Table")
        createTable  
            ;;
        
        "List Tables")
            echo "You chose to List Tables"

            listTables
            ;;
        
        "Drop Table")
            dropTables 
            ;;
        
        "Insert into Table")
            InsertIntoTable "$tableName" "$columns" "$values"
            ;;
        
        "Select From Table")
            selectFromTable "$tableName"
            ;;
        
        "Delete From Table")
        
            deleteFromTable "$tableName" "$condition"
            ;;
        "Update Table")
            updateTable 
            ;;
        
        "Back to main menu")
        cd ~/Project
            mainManu
            break
            ;;
        
        *)
            echo "Not a valid option, please try again."
            ;;
    esac
done
}
